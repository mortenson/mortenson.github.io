uuid:
  - value: 83d3d524-6f7f-460e-9559-29ba19d08d5b
langcode:
  - value: en
type:
  - target_id: blog
    target_type: node_type
    target_uuid: a90c00e7-fd49-42a6-8cdb-e99ec16f7742
revision_timestamp:
  - value: '2020-02-02T13:33:28+00:00'
    format: 'Y-m-d\TH:i:sP'
revision_uid:
  - target_type: user
    target_uuid: 30bffdc0-96b3-4656-9078-3f8113359c60
revision_log: {  }
status:
  - value: true
uid:
  - target_type: user
    target_uuid: 30bffdc0-96b3-4656-9078-3f8113359c60
title:
  - value: 'Simplifying Drupal frontend with Single File Components'
created:
  - value: '2019-10-06T16:10:53+00:00'
    format: 'Y-m-d\TH:i:sP'
changed:
  - value: '2020-02-02T13:33:28+00:00'
    format: 'Y-m-d\TH:i:sP'
promote:
  - value: true
sticky:
  - value: false
default_langcode:
  - value: true
revision_translation_affected:
  - value: true
path:
  - alias: /blog/simplifying-drupal-frontend-single-file-components
    langcode: en
    pathauto: 1
body:
  - value: |
      <p>I‚Äôve been thinking about ways to make Drupal frontend easier recently, and have been working on an experimental module called Single File Components (SFC), which lets you put your CSS, JS, Twig, and PHP in one file. If you want to skip the blog (üò≠) you can just check out the project at&nbsp;<a href="https://www.drupal.org/project/sfc">https://www.drupal.org/project/sfc</a>.</p>

      <p>The main problems with Drupal frontend SFC aims to help with are:</p>

      <ol>
      	<li>Organizing Drupal frontend code is hard.</li>
      	<li>Splitting your CSS/JS into separate files and writing "*.libraries.yml" entries is tedious, especially with small files. Many themes have a single CSS/JS bundle for this reason.</li>
      	<li>Writing JS in the ‚Äúcorrect‚Äù Drupal way is surprisingly hard, and rare to find even in popular contributed themes and modules.</li>
      	<li>When Twig isn‚Äôt enough and you need PHP for something, it‚Äôs difficult to figure out where that goes and it‚Äôs often unclear that something like a preprocess is required for a Twig template to work.</li>
      	<li>Testing frontend Twig and PHP is hard.</li>
      	<li>Quickly providing custom Blocks, Layouts, and Field Formatters that use Twig templates is hard.</li>
      </ol>

      <p>It‚Äôs important to note that there are many other component-y solutions out there for Drupal, and most help with the same problems. Projects like Pattern Lab and Component Libraries are widely used and enjoyed by many, so please use them over SFC if they feel better to you! Open source isn‚Äôt a competition but with frontend it can often feel that way. Phew, glad that‚Äôs covered.</p>

      <p>Let‚Äôs get into it and start building a component. There are two ways to build components with SFC, but we‚Äôll start with the simplest, which is to make a .sfc file in the ‚Äúcomponents‚Äù directory of any enabled module or theme. The component we‚Äôre building says ‚ÄúHello‚Äù to users, so we‚Äôll need some Twig that takes the name of the user, and some CSS to uniquely style it.</p>

      <p>Here‚Äôs say_hello.sfc:</p>

      <pre>
      <code>&lt;style&gt;
        .say-hello {
          font-size: 20px;
        }
      &lt;/style&gt;

      &lt;template&gt;
        &lt;p class="say-hello"&gt;Hello {{ name }}!&lt;/p&gt;
      &lt;/template&gt;
      </code></pre>

      <p>After a cache rebuild, you can now use this component anywhere by including it in a Twig template:</p>

      <pre>
      <code>{% include "sfc--say-hello.html.twig" with {"name": "Sam"} %}
      </code></pre>

      <p>Pretty cool right? There‚Äôs obviously a lot happening here that I‚Äôve abstracted away from users, so here‚Äôs my quick rundown:</p>

      <ul>
      	<li>*.sfc files are used by a service that derives SingleFileComponent plugins.</li>
      	<li>A library definition is automatically generated because the component includes CSS.</li>
      	<li>A custom Twig loader will create instances of SingleFileComponent plugins when they‚Äôre rendered and use their templates.</li>
      	<li>An {{ attach_library(...) }} call is automatically prepended to the template.</li>
      	<li>When assets for the library are collected, the component‚Äôs CSS is output to a separate file.</li>
      </ul>

      <p>The goal here is to make the end users, frontend developers, unaware of all the magic that makes this so easy. That‚Äôs what a module should do, right?</p>

      <p>Let‚Äôs try a more complicated component, one that counts how many times it has been clicked.</p>

      <p>Here‚Äôs click_counter.sfc:</p>

      <pre>
      <code>&lt;script data-type="attach"&gt;
        var count = 0;
        $(this).on('click.sfc_click_counter', function () {
          $(this).text('Clicked ' + ++count + ' times');
        });
      &lt;/script&gt;

      &lt;script data-type="detach"&gt;
        $(this).off('click.sfc_click_counter');
      &lt;/script&gt;

      &lt;template&gt;
        &lt;button class="click-counter"&gt;Clicked 0 times&lt;/button&gt;
      &lt;/template&gt;

      &lt;?php
      $selector = '.click-counter';
      </code></pre>

      <p>This has a few new elements we should talk about. We‚Äôre writing JavaScript now, so there are &lt;script&gt; tags, but that data-type attribute is something unique to SFC. To make things easier for frontend developers, you can write attach/detach code inside these special script tags, and just reference this, which is the element selected by your $selector.</p>

      <p>The code in these blocks is parsed and wrapped with a lot of other stuff - the actual output JS from this .sfc file is this:</p>

      <pre>
      <code>(function ($, Drupal, drupalSettings) {
        Drupal.behaviors.sfc_click_counter = {
          attach: function attach(context, settings) {
            $(".click-counter", context).addBack(".click-counter").once('sfcAttach').each(function () {
              var count = 0;
              $(this).on('click.sfc_click_counter', function () {
                $(this).text('Clicked ' + ++count + ' times');
              });
            });
          },
          detach: function detach(context, settings, trigger) {
            $(".click-counter", context).addBack(".click-counter").once('sfcDetach').each(function () {
              $(this).off('click.sfc_click_counter');
            });
            var element = $(".click-counter", context).addBack(".click-counter");element.removeOnce('sfcAttach');element.removeOnce('sfcDetach');
          },
        }
      })(jQuery, Drupal, drupalSettings);
      </code></pre>

      <p>To people familiar with Drupal, this code might make sense to you. But for modern frontend development, this is a ridiculous amount of scaffolding. This is how ‚Äúcorrect‚Äù JS is meant to be written in Drupal: It should be inside a behavior, it should use attach/detach, and it should use jQuery.once. Why should frontend developers have to write this code every time they‚Äôre trying to write a simple Drupal behavior? I figured that if the point of SFC is to simplify the frontend, it should try to make JS easier to write too.</p>

      <p>All that said, if you define a normal &lt;script&gt; tag without a data-type, it‚Äôll be left as is. This is nice if you don‚Äôt like my magic scaffolding or want to define any global JS.</p>

      <p>So that‚Äôs the basics of defining a .sfc file, but as previously mentioned you can also define SingleFileComponent plugins as PHP classes.</p>

      <p>Here‚Äôs the same say_hello component as a class:</p>

      <pre>
      <code>&lt;?php

      namespace Drupal\example\Plugin\SingleFileComponent;

      use Drupal\Core\Form\FormStateInterface;
      use Drupal\sfc\ComponentBase;

      /**
       * Contains an example single file component.
       *
       * @SingleFileComponent(
       *   id = "say_hello",
       *   block = {
       *     "admin_label" = "Say hello",
       *   }
       * )
       */
      class SayHello extends ComponentBase {

        const TEMPLATE = &lt;&lt;&lt;TWIG
      &lt;p class="say-hello"&gt;Hello {{ name }}!&lt;/p&gt;
      TWIG;

        const CSS = &lt;&lt;&lt;CSS
      .say-hello {
        font-size: 20px;
      }
      CSS;

        public function buildContextForm(array $form, FormStateInterface $form_state, array $default_values = []) {
          $form['name'] = [
            '#type' =&gt; 'textfield',
            '#title' =&gt; $this-&gt;t('Name'),
            '#default_value' =&gt; isset($default_values['name']) ? $default_values['name'] : '',
          ];
          return $form;
        }

        public function prepareContext(array &amp;$context) {
          if (!isset($context['name'])) {
            $context['name'] = \Drupal::currentUser()-&gt;getDisplayName();
          }
        }

      }
      </code></pre>

      <p>Class components that extend ComponentBase define their CSS/JS/Twig in constants, and are used just like *.sfc components. This example does have some functional differences though - the annotation for the plugin includes a block key, which as you may guess allows class components to be used as blocks in the Block UI or Layout Builder. This saves developers from defining a separate block plugin themselves. Components can also have layout and field formatter plugins derived with similar annotations. I think component templates should be agnostic to how they‚Äôre used, but I‚Äôve found that for components that act as layouts and field formatters that‚Äôs very hard to pull off, so don‚Äôt sweat it.</p>

      <p>The buildContextForm method in this example can be used by anyone consuming your component - if you‚Äôre deriving a block, layout, or field formatter the form will be used there, but it could be used in other user interfaces as well. The values from your form will be passed directly to your template, so make sure to sanitize them yourself.</p>

      <p>Finally, the prepareContext method allows you to write PHP that processes template context before it‚Äôs passed to Twig. This is great for grabbing default values, or doing anything that Twig can‚Äôt normally do. It‚Äôs nice to have the PHP code so close to the template, I‚Äôve found that tracking down preprocesses and alters in themes to be quite difficult.</p>

      <p>Class components also support dependency injection, which means their PHP methods can be fully unit tested!</p>

      <p>For integration-style testing (any rendering of Twig is probably going to be an integration test), SFC provides two test traits. The first is meant for Kernel tests, and provides methods for render a component by its ID:</p>

      <pre>
      <code>$session = new UserSession([
        'name' =&gt; 'Default',
      ]);
      $proxy = new AccountProxy();
      $proxy-&gt;setAccount($session);
      \Drupal::currentUser()-&gt;setAccount($proxy);
      $this-&gt;assertEquals('&lt;p class="say-hello"&gt;Hello Default!&lt;/p&gt;', $this-&gt;renderComponent('say_hello', []));
      </code></pre>

      <p>and for rendering component objects - which is nice when using mocks:</p>

      <pre>
      <code>$file_system = $this-&gt;createMock(FileSystemInterface::class);
      $current_user = $this-&gt;createMock(AccountProxyInterface::class);
      $current_user-&gt;method('getDisplayName')-&gt;willReturn('Default');
      $component = new SayHello([], 'say_hello', [], FALSE, 'vfs:/', $file_system, $current_user);
      $this-&gt;assertEquals('&lt;p class="say-hello"&gt;Hello Default!&lt;/p&gt;', $this-&gt;renderComponentObject($component, []));
      </code></pre>

      <p>The other trait is for use with full-blown functional testing:</p>

      <pre>
      <code>$this-&gt;visitComponent(say_hello, []);
      $assert_session-&gt;pageTextContains("Hello Default!");
      </code></pre>

      <p>You can also use this to test an individual component‚Äôs JS behavior!To manually test components you can enable the sfc_dev sub-module, which provides Drush commands for re-building component assets, and an interactive library that lets you play with all your single file components.</p>

      <p>Test coverage is important to me, especially with complex frontend components, and SFC itself has 100% test coverage (in terms of executed lines), which is a first for one of my projects. Not sure if I‚Äôd do it again but it was pretty fun to test my skills out.</p>

      <p>That‚Äôs about all I have to say about what the module does - if you want to know more check out the project page at&nbsp;<a href="https://www.drupal.org/project/sfc">https://www.drupal.org/project/sfc</a>, and make sure read the&nbsp;<a href="https://git.drupalcode.org/project/sfc/blob/8.x-1.x/README.md">README.md</a>&nbsp;file which goes into more detail about all these features.</p>

      <p>SFC is still in the alpha phase of development, so be wary that things might change a bit before its stable release. However, no major rewrites are wanted or planned.</p>

      <p>Thanks for reading and please try the module out!</p>
    format: full_html
    summary: ''
field_tags:
  - target_type: taxonomy_term
    target_uuid: d9871794-7262-415a-a18e-fc784794b1c9
  - target_type: taxonomy_term
    target_uuid: 23b07c20-ef0f-49f3-8dba-f3b1daa50c5e
