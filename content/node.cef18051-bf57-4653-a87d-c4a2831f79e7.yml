uuid:
  - value: cef18051-bf57-4653-a87d-c4a2831f79e7
langcode:
  - value: en
type:
  - target_id: blog
    target_type: node_type
    target_uuid: a90c00e7-fd49-42a6-8cdb-e99ec16f7742
revision_timestamp:
  - value: '2020-01-27T17:47:46+00:00'
    format: 'Y-m-d\TH:i:sP'
revision_uid:
  - target_type: user
    target_uuid: 30bffdc0-96b3-4656-9078-3f8113359c60
revision_log: {  }
status:
  - value: true
uid:
  - target_type: user
    target_uuid: 30bffdc0-96b3-4656-9078-3f8113359c60
title:
  - value: 'How I work on Drupal'
created:
  - value: '2018-05-17T16:05:29+00:00'
    format: 'Y-m-d\TH:i:sP'
changed:
  - value: '2020-01-27T17:47:46+00:00'
    format: 'Y-m-d\TH:i:sP'
promote:
  - value: true
sticky:
  - value: false
default_langcode:
  - value: true
revision_translation_affected:
  - value: true
path:
  - alias: /blog/how-i-work-drupal
    langcode: en
    pathauto: 1
body:
  - value: |
      <p>I recently celebrated my&nbsp;<a href="https://drupalbirthday.fun/samuel.mortenson">five-year anniversary</a>&nbsp;on Drupal.org, and wanted to write about how I work on issues day-to-day and my general contribution ‚Äúvibe‚Äù.</p>

      <p>My Drupal.org account was created the week I started working at Acquia as a part of their employee on-boarding, and I only really used it to search issues and post an occasional comment at first. I know a lot of people in the community have grand stories about how they found Drupal, but mine is rather boring, unfortunately.</p>

      <p>Fast-forwarding to today, my full time job is to contribute to Drupal core. I don‚Äôt have an official community title, but have recently been helping out on the Media and Layout initiatives. I also maintain or co-maintain&nbsp;<a href="https://www.drupal.org/project/user/samuel.mortenson">28 contributed projects</a>, which means I‚Äôm jumping in and out of different issue queues all the time.</p>

      <p>When you spend enough time doing the same kind of task, you end up compartmentalizing what you do in order to make things more efficient or sane. I do this all the time when working on issues, but never write my process down. This post is going to be my best attempt to brain-dump what I‚Äôve learned after five years of contribution.</p>

      <h2 id="trust-your-feelings">Trust your feelings</h2>

      <p>You may have heard of&nbsp;<a href="https://en.wikipedia.org/wiki/Code_smell">code smell</a>&nbsp;before, but issues can definitely feel weird too. When I first open an issue I try to read through the entire issue summary and every comment, then try to get a feeling for what hasn‚Äôt been explicitly said.</p>

      <p>Trying to categorize this is tough, but here are some examples:</p>

      <ol>
      	<li>Issues marked as ‚ÄúNeeds review‚Äù or ‚ÄúReviewed and tested by the community‚Äù (RTBC) where users are arguing in the comments. It‚Äôs probably best to change the status to ‚ÄúNeeds work‚Äù or wait for the flames to die down before committing the patch.</li>
      	<li>Issues with huge (100k+) patches. Large issues can often be split into multiple sub-issues, or are otherwise just introducing too many changes in one go.</li>
      	<li>Issues where the motivation isn‚Äôt clear. Sometimes features are proposed to projects and the true intentions of the user are intentionally hidden. I would guess that this usually happens when a client requests something and a developer creates a patch for it, just so they can finish the contract. That‚Äôs fine for the developer, but the maintainer has to own that code forever.</li>
      	<li>Issues where everyone involved is from the same company. It‚Äôs not a bad thing that a company will open an issue and push it forward by themselves, but it‚Äôs reasonable to double-check an issue marked RTBC if everyone involved works together.</li>
      </ol>

      <p>If an issue seems like a minefield, it‚Äôs harder for me to jump into it and contribute, but not impossible. Maintainers are much more likely to respond to issues that seem clear and uncomplicated.</p>

      <h2 id="replication-and-confirmation">Replication and confirmation</h2>

      <p>Once I know why the issue exists, I usually jump into replicating the problem. This part is tough because replication steps aren‚Äôt always available, and there are cases where the issue is only repeatable on a customer‚Äôs production site.</p>

      <p>Regardless of how hard it may be to manually replicate a bug, or manually test out a new feature, I think this is a really important part of fixing an issue. If you skip this step, you may miss UX regressions or that the fix wasn‚Äôt as complete as the issue led on.</p>

      <h2 id="actual-code-review">Actual code review</h2>

      <p>Among my peers I‚Äôm probably the most lax code reviewer. I‚Äôm usually not scouring every line of code looking for nitpicks, but do focus on the same kind of problems in every patch:</p>

      <ol>
      	<li>Check that test coverage exists and covers&nbsp;<em>most</em>&nbsp;of the patch.</li>
      	<li>Check coding standards using&nbsp;<a href="https://www.drupal.org/node/1419988">PHPCodeSniffer</a>.</li>
      	<li>Look for code that could be split into new methods or functions.</li>
      	<li>Check for logical problems - this one seems obvious but people can get so hung up on best practices that they don‚Äôt review the actual code.</li>
      	<li>Smell the code - if a patch doesn‚Äôt feel right to me, even if I can‚Äôt explain why right away, I won‚Äôt sign off on it.</li>
      </ol>

      <p>For my own projects, if a patch is good enough, but not perfect, I‚Äôll probably commit it. I think keeping the community engaged and people feeling positive about contribution is sometimes more valuable than perfect code. For Drupal core, maintainers have been burned by ‚Äúgood enough‚Äù code too often, so the standards for what gets committed are extremely high. That could mean months of code review for a patch, which while grueling is necessary to keeping core maintainable and stable.</p>

      <h2 id="empathy-is-a-hell-of-a-drug">Empathy is a hell of a drug</h2>

      <p>For projects I work on with a lot of users and open issues, I often see contributors frustrated at how long it takes for bugs to get fixed. This one is tough for me, because I take criticism to heart and when someone questions if something I work on is even maintained, it makes me feel like a bad steward.</p>

      <p>From my perspective, I‚Äôm a volunteer maintainer and don‚Äôt have a lot of time to work in issue queues. When I do have time, I focus on issues that are in ‚ÄúNeeds review‚Äù or RTBC. Often times those issues are missing test coverage or have a logical problem, so I‚Äôll move them back to ‚ÄúNeeds work‚Äù which I‚Äôm sure frustrates contributors to no end.</p>

      <p>From some contributor and user perspectives, maintainers have a responsibility to respond to requests in a timely fashion, and have a duty to their userbase. If a project doesn‚Äôt have recent commits and issue activity, these users view it as unmaintained.</p>

      <p>Both perspectives are valid, but I can‚Äôt spend 100% of my time on Drupal.org, and while I‚Äôm at work I can (should?) only really work on Drupal core.</p>

      <p>I spent a lot of time thinking about a middle-ground between burning out and checking out, and have decided to mark&nbsp;<strong>all my projects</strong>&nbsp;as ‚ÄúSeeking co-maintainer(s)‚Äù. The hope here is that contributors can step up and help me maintain projects that they‚Äôre interested in, instead of relying solely on me to fix everything. This is a little scary for me as I tend to work alone, or as support for other maintainers, but I think it‚Äôs the right move.</p>

      <h2 id="automating-my-job">Automating my job</h2>

      <p>Working on Drupal.org can feel monotonous - I end up performing the exact same set of commands when testing and creating patches, but have never thought to automate this before recently. The barrier to entry for the patch workflow can can also be quite high for new users, who may be used to Github pull requests or cowpoke coding on production.</p>

      <p>Recently I‚Äôve made a commitment to implement&nbsp;<a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a>&nbsp;for my Drupal.org workflow, and have created a repository for Symfony commands that automate my most common and least-liked tasks. You can view the project at&nbsp;<a href="https://github.com/mortenson/issue">mortenson/issue</a>.</p>

      <p>Here‚Äôs an end-to-end example of me checking out Drupal core, trying out the latest patch from the&nbsp;<a href="https://www.drupal.org/project/drupal/issues/2962110">Media library issue I‚Äôm working on</a>, and creating a new patch and interdiff:</p>

      <p>Tools like this will hopefully let me work more efficiently, and help newcomers as well.</p>

      <h2 id="parting-thoughts">Parting thoughts</h2>

      <p>I‚Äôve done a lot in the last five years, but am still balancing what‚Äôs best for the community and what‚Äôs best for not going completely mad. I think the biggest lesson I‚Äôve learned is that the hardest problems in Drupal revolve around communication, collaboration, respect and empathy. There are real people behind usernames and their biggest gripes are rarely about code. I want to grow as a developer, but want to spend more time supporting the community going forward.</p>

      <p>Here‚Äôs to five more years! üçª‚òïÔ∏è</p>
    format: full_html
    summary: ''
field_tags:
  - target_type: taxonomy_term
    target_uuid: d9871794-7262-415a-a18e-fc784794b1c9
