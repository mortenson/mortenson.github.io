{
    "uuid": [
        {
            "value": "11effcab-b3c1-427c-a2bd-9fbe29fae813"
        }
    ],
    "langcode": [
        {
            "value": "en"
        }
    ],
    "type": [
        {
            "target_id": "blog",
            "target_type": "node_type",
            "target_uuid": "a90c00e7-fd49-42a6-8cdb-e99ec16f7742"
        }
    ],
    "revision_timestamp": [
        {
            "value": "2020-04-20T05:11:43+00:00",
            "format": "Y-m-d\\TH:i:sP"
        }
    ],
    "revision_uid": [
        {
            "target_type": "user",
            "target_uuid": "30bffdc0-96b3-4656-9078-3f8113359c60"
        }
    ],
    "revision_log": [],
    "status": [
        {
            "value": true
        }
    ],
    "uid": [
        {
            "target_type": "user",
            "target_uuid": "30bffdc0-96b3-4656-9078-3f8113359c60"
        }
    ],
    "title": [
        {
            "value": "Making a multiplayer game with Go and gRPC"
        }
    ],
    "created": [
        {
            "value": "2020-04-20T00:34:16+00:00",
            "format": "Y-m-d\\TH:i:sP"
        }
    ],
    "changed": [
        {
            "value": "2020-04-20T05:11:43+00:00",
            "format": "Y-m-d\\TH:i:sP"
        }
    ],
    "promote": [
        {
            "value": true
        }
    ],
    "sticky": [
        {
            "value": false
        }
    ],
    "default_langcode": [
        {
            "value": true
        }
    ],
    "revision_translation_affected": [
        {
            "value": true
        }
    ],
    "path": [
        {
            "alias": "\/blog\/making-multiplayer-game-go-and-grpc",
            "langcode": "en",
            "pathauto": 1
        }
    ],
    "body": [
        {
            "value": "<p>tl;dr here\u2019s the repo <a href=\"https:\/\/github.com\/mortenson\/grpc-game-example\">https:\/\/github.com\/mortenson\/grpc-game-example<\/a><\/p>\r\n\r\n<p>Recently I\u2019ve started to pick up a new programming language, <a href=\"http:\/\/golang.org\/\">Go<\/a>, but have struggled to absorb lessons from presentations and tutorials into practical knowledge. My preferred learning method is always to work on a real project, even if it means the finished work has loads of flaws. I\u2019ve also been reading more about <a href=\"https:\/\/grpc.io\/\">gRPC<\/a>, which is useful to know professionally but also has a nice Go implementation. With all this in mind, I decided to create a multiplayer online game using Go and gRPC. I\u2019ll go over what I ended up in this blog post, but keep in mind that I\u2019m only ~3 months into Go and have never made a multiplayer game before, so design mistakes are more than likely.<\/p>\r\n\r\n<h2>A summary of the game<\/h2>\r\n\r\n<p>The finished product here was \u201ctshooter\u201d - a local or online multiplayer shooting game you play in your terminal. Players can move in a map and fire lasers at other players. When a player is hit, they respawn on the map and the shooting player\u2019s score is increased. When a player reaches 10 kills, the round ends and a new round begins. You can play the game offline with bots, or online with up to eight players (but that limit is arbitrary).<\/p>\r\n\r\n<h2>Building a game engine<\/h2>\r\n\r\n<p>While there are many nice game engines for Go, the whole point of this project was to learn so I figured building on top of a huge abstraction wouldn\u2019t be the best use of my time. I read a bit about game engine paradigms like the \u201c<a href=\"https:\/\/en.wikipedia.org\/wiki\/Entity_component_system\">Entity Component System<\/a>\u201d pattern, and decided to build something that had some abstractions but didn\u2019t go too overboard since the scope of what I wanted to accomplish was relatively small.<\/p>\r\n\r\n<p>I created a \u201cbackend\u201d package for my project, which provides a \u201cGame\u201d struct that holds information about the game state:<\/p>\r\n\r\n<p><code>type Game struct {<br \/>\r\n&nbsp;&nbsp;&nbsp;Entities &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map[uuid.UUID]Identifier<br \/>\r\n&nbsp;&nbsp;&nbsp;gameMap &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[][]rune<br \/>\r\n&nbsp;&nbsp;&nbsp;Mu &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sync.RWMutex<br \/>\r\n&nbsp;&nbsp;&nbsp;ChangeChannel &nbsp;&nbsp;chan Change<br \/>\r\n&nbsp;&nbsp;&nbsp;ActionChannel &nbsp;&nbsp;chan Action<br \/>\r\n&nbsp;&nbsp;&nbsp;lastAction &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map[string]time.Time<br \/>\r\n&nbsp;&nbsp;&nbsp;Score &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map[uuid.UUID]int<br \/>\r\n&nbsp;&nbsp;&nbsp;NewRoundAt &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time.Time<br \/>\r\n&nbsp;&nbsp;&nbsp;RoundWinner &nbsp;&nbsp;&nbsp;&nbsp;uuid.UUID<br \/>\r\n&nbsp;&nbsp;&nbsp;WaitForRound &nbsp;&nbsp;&nbsp;bool<br \/>\r\n&nbsp;&nbsp;&nbsp;IsAuthoritative bool<br \/>\r\n&nbsp;&nbsp;&nbsp;spawnPointIndex int<br \/>\r\n}<\/code><\/p>\r\n\r\n<p>I also came up with a way to communicate game events by using a \u201cAction\u201d and \u201cChange\u201d channel. Actions are requests to change game state, and may not be accepted by the game. For instance, when a player presses an arrow key, a \u201cMoveAction\u201d is sent to the change channel with the following information:<\/p>\r\n\r\n<p><code>type MoveAction struct {<br \/>\r\n&nbsp;&nbsp;&nbsp;Direction Direction<br \/>\r\n&nbsp;&nbsp;&nbsp;ID &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uuid.UUID<br \/>\r\n&nbsp;&nbsp;&nbsp;Created &nbsp;&nbsp;time.Time<br \/>\r\n}<\/code><\/p>\r\n\r\n<p>In a separate goroutine, the game receives actions and performs them:<\/p>\r\n\r\n<p><code>func (game *Game) watchActions() {<br \/>\r\n&nbsp;&nbsp;&nbsp;for {<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action := &lt;-game.ActionChannel<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if game.WaitForRound {<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;game.Mu.Lock()<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action.Perform(game)<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;game.Mu.Unlock()<br \/>\r\n&nbsp;&nbsp;&nbsp;}<br \/>\r\n}<\/code><\/p>\r\n\r\n<p>&nbsp;Each action implements the Action interface, which contains a Perform method that may change game state. For instance, the MoveAction\u2019s Perform method will not move an entity if any of the following are true:<\/p>\r\n\r\n<ul>\r\n\t<li>A player moved too recently<\/li>\r\n\t<li>A player is trying to move into a wall<\/li>\r\n\t<li>A player is trying to move into another player<\/li>\r\n<\/ul>\r\n\r\n<p>With this abstraction in place, things outside of the game can send any number of actions without worrying about whether or not that Action will actually work. This lets players spam keys on their keyboard, or clients spam requests to the server, without negative consequences.<\/p>\r\n\r\n<p>When an action is performed and actually changes game state, a Change struct is sent on the change channel, which can be used to communicate changes to clients\/servers. When a player is moved as a result of an action, this struct is sent:<\/p>\r\n\r\n<p><code>type MoveChange struct {<br \/>\r\n&nbsp;&nbsp;&nbsp;Change<br \/>\r\n&nbsp;&nbsp;&nbsp;Entity &nbsp;&nbsp;&nbsp;Identifier<br \/>\r\n&nbsp;&nbsp;&nbsp;Direction Direction<br \/>\r\n&nbsp;&nbsp;&nbsp;Position &nbsp;Coordinate<br \/>\r\n}<\/code><\/p>\r\n\r\n<p>If something changes game state directly without using an action, no change is fired. This is important because now the client\/server (which we\u2019ll get into later) knows exactly what they need to communicate.<\/p>\r\n\r\n<p>When a laser is fired by a player, the resulting change is more abstract:<\/p>\r\n\r\n<p><code>type AddEntityChange struct {<br \/>\r\n&nbsp;&nbsp;&nbsp;Change<br \/>\r\n&nbsp;&nbsp;&nbsp;Entity Identifier<br \/>\r\n}<\/code><\/p>\r\n\r\n<p>I made this decision because if I add new weapons, or the player gets the ability to create static objects, AddEntityChange could be reused. Since in the end this change is only used for new lasers, it feels quite awkward in the codebase. This is probably an example of over-abstracting things too early.<\/p>\r\n\r\n<p>The action =&gt; change flow is half of how the game engine works, with the other half being another goroutine that watches for entity collisions. Entities in the engine are anything on the map that isn\u2019t completely static, which for now are players and lasers. The collision loop is quite long so I won\u2019t go into the code, but it does the following:<\/p>\r\n\r\n<ol>\r\n\t<li>Create a map of coordinates (X\/Y pairs) to sets of entities.<\/li>\r\n\t<li>For each map item, check if more than one entity exists. If so, that means a collision took place.<\/li>\r\n\t<li>Check if one of those entities is a laser.<\/li>\r\n\t<li>For each colliding entity, check the entity type. If a laser collides with a laser it is destroyed. If a laser collides with a player the player is respawned and their score is incremented.<\/li>\r\n\t<li>Check if the player score is high enough to queue a new round - if so change the game state accordingly and inform listeners on the change channel.<\/li>\r\n\t<li>Remove lasers that hit walls This happens later on since walls aren\u2019t entities, they\u2019re a part of the game map.<\/li>\r\n<\/ol>\r\n\r\n<p>The collision function is one of the longest in the codebase, and is probably the messiest. Maybe with more entity types you could abstract what happens when two entities collide, like the laser could be \u201clethal\u201d and the player could be \u201ckillable\u201d, but it didn\u2019t feel worth it when writing this.<\/p>\r\n\r\n<p>For the game map, I went with a two dimensional set of runes, which define where walls and spawn points are located. The default map for the game looks like this:<\/p>\r\n<img alt=\"A map in tshooter\" data-align=\"center\" data-entity-type=\"file\" data-entity-uuid=\"d6eeb130-bb6d-44c6-b21e-6500632f9e42\" height=\"496\" src=\"\/sites\/default\/files\/inline-images\/Screenshot%20from%202020-04-19%2010-17-03.png\" width=\"544\" \/>\r\n<p>That's about all the game engine does - consume actions, send changes, and track collisions. The game is completely abstracted away from the frontend and the networking model, which I\u2019m really happy with. I think my biggest regret here is that because there are so many consumers of game state, the codebase has a lot of mutex locking. If I wrote this as one game loop and not asynchronously maybe this could have been avoided, I\u2019m not sure which is more maintainable.<\/p>\r\n\r\n<h2>A terminal frontend<\/h2>\r\n\r\n<p>For the frontend of the game, I used <a href=\"https:\/\/github.com\/rivo\/tview\">tview<\/a>, a project that lets you quickly make terminal user interfaces with Go. This game doesn\u2019t have a complex user interface, but tview provided a lot of useful features for me:<\/p>\r\n\r\n<ul>\r\n\t<li>If I wanted to add in forms later, tview would be essential for a good user experience.<\/li>\r\n\t<li>Its layout tools allow the game \u201cviewport\u201d to be flexible - adjusting to terminal resizes and the presence of other screen content (like borders, help text, modals).<\/li>\r\n\t<li>Building something with the terminal lets me skip the artistic part of game development, which for me takes the most time.<\/li>\r\n<\/ul>\r\n\r\n<p>The design of the frontend isn\u2019t remarkable or complex - in fact that part of the codebase is the least \u201carchitected\u201d compared to other packages. For displaying game state, the viewport is redrawn at around 60 frames per second, and literally loops through the game\u2019s entities and map to output ascii characters at the appropriate position.<\/p>\r\n\r\n<p>One interaction I like in the frontend is the camera movements when the screen is smaller - there\u2019s a dynamic threshold of how far the player can travel from the center of the screen before the camera starts scrolling, which allows the game to be played on any terminal size.<\/p>\r\n<img alt=\"A demo of tshooter's camera movement\" data-align=\"center\" data-entity-type=\"file\" data-entity-uuid=\"e086f991-ccb5-4f2a-9771-d2455f560717\" height=\"355\" src=\"\/sites\/default\/files\/inline-images\/shootermove.gif\" width=\"601\" \/>\r\n<p>Beyond displaying game state, the frontend also handles user input. As outlined above, when the user presses the arrows keys a MoveAction is sent to the backend, and when they press any WASD key a LaserAction is sent. The frontend never writes game state directly, and contains almost no state itself.<\/p>\r\n\r\n<h2>gRPC protobuf design<\/h2>\r\n\r\n<p>With the backend and frontend in place, the game was fully functional offline. Next I had to outline the .proto file for the game, and decide how the client and server would work.<\/p>\r\n\r\n<p>After a lot of iteration, I decided to split the game into two gRPC services:<\/p>\r\n\r\n<p><code>service Game {<br \/>\r\n&nbsp;&nbsp;&nbsp;rpc Connect (ConnectRequest) returns (ConnectResponse) {}<br \/>\r\n&nbsp;&nbsp;&nbsp;rpc Stream (stream Request) returns (stream Response) {}<br \/>\r\n}<\/code><\/p>\r\n\r\n<p>\u201cConnect\u201d would allow clients to request to be added to the game. Once their connection was accepted, they could start a new bi-directional stream with the server. The connect messages are:<\/p>\r\n\r\n<p><code>message ConnectRequest {<br \/>\r\n&nbsp;&nbsp;&nbsp;string id = 1;<br \/>\r\n&nbsp;&nbsp;&nbsp;string name = 2;<br \/>\r\n&nbsp;&nbsp;&nbsp;string password = 3;<br \/>\r\n}<br \/>\r\n&nbsp;<br \/>\r\nmessage ConnectResponse {<br \/>\r\n&nbsp;&nbsp;&nbsp;string token = 1;<br \/>\r\n&nbsp;&nbsp;&nbsp;repeated Entity entities = 2;<br \/>\r\n}<\/code><\/p>\r\n\r\n<p>ConnectRequest contains an ID (the UUID of the player), the player name, and the server\u2019s password. Once connected, the server responds with a token and a set of entities, which lets you join with the initial state of the game intact.<\/p>\r\n\r\n<p>In the first iteration of the design, everything happened in the stream, including the request to connect. This worked, but meant that you could open unlimited streams to the server with no authentication, and the server would have to wait on the connect request which is costly. While I didn\u2019t test this, I would imagine that you could open enough streams to overload the server, or hit some connection or thread limit. Having the connect request separate felt more secure to me, although security was not a primary concern with this project.<\/p>\r\n\r\n<p>The stream messages look like this:<\/p>\r\n\r\n<p><code>message Request {<br \/>\r\n&nbsp;&nbsp;&nbsp;oneof action {<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Move move = 1;<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Laser laser = 2;<br \/>\r\n&nbsp;&nbsp;&nbsp;}<br \/>\r\n}<br \/>\r\n&nbsp;<br \/>\r\nmessage Response {<br \/>\r\n&nbsp;&nbsp;&nbsp;oneof action {<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AddEntity addEntity = 1;<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UpdateEntity updateEntity = 2;<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RemoveEntity removeEntity = 3;<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PlayerRespawn playerRespawn = 4;<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RoundOver roundOver = 5;<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RoundStart roundStart = 6;<br \/>\r\n&nbsp;&nbsp;&nbsp;}<br \/>\r\n}<\/code><\/p>\r\n\r\n<p>The requests and responses mirror game actions and changes, which makes the integration between the game engine and the client\/server feel natural. Note that the use of \u201coneof\u201d here is, as far as I\u2019m aware, the only way to use multiple message types with gRPC streaming. While it seems OK in the .proto file, I found this cumbersome to deal with in the implementation.<\/p>\r\n\r\n<p>I don\u2019t want to go too deep into the messages, but I can show two examples. First, here\u2019s the message for move requests:<\/p>\r\n\r\n<p><code>enum Direction {<br \/>\r\n&nbsp;&nbsp;&nbsp;UP = 0;<br \/>\r\n&nbsp;&nbsp;&nbsp;DOWN = 1;<br \/>\r\n&nbsp;&nbsp;&nbsp;LEFT = 2;<br \/>\r\n&nbsp;&nbsp;&nbsp;RIGHT = 3;<br \/>\r\n&nbsp;&nbsp;&nbsp;STOP = 4;<br \/>\r\n}<br \/>\r\nmessage Move {<br \/>\r\n&nbsp;&nbsp;&nbsp;Direction direction = 1;<br \/>\r\n}<\/code><\/p>\r\n\r\n<p>As shown here, clients send the most minimal requests possible to the server. The server already knows who the player is and what time the request came in, so we don\u2019t need to mimic the MoveChange struct exactly.<\/p>\r\n\r\n<p>When a move message comes in, a goroutine that watches for stream requests receives it and creates a MoveChange to send to the server. That code looks like this:<\/p>\r\n\r\n<p><code>func (s *GameServer) handleMoveRequest(req *proto.Request, currentClient *client) {<br \/>\r\n&nbsp;&nbsp;&nbsp;move := req.GetMove()<br \/>\r\n&nbsp;&nbsp;&nbsp;s.game.ActionChannel &lt;- backend.MoveAction{<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentClient.playerID,<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Direction: proto.GetBackendDirection(move.Direction),<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Created: &nbsp;&nbsp;time.Now(),<br \/>\r\n&nbsp;&nbsp;&nbsp;}<br \/>\r\n}<\/code><\/p>\r\n\r\n<p>Note the \u201cproto.GetBackendDirection\u201d method here - I found that I had to transform game engine structs to proto structs (and vise versa) so often that I needed to create helpers that would do the conversion for me. This is used even more heavily with server responses that send new and updated entities to clients.<\/p>\r\n\r\n<p>For another example, here\u2019s the proto messages used for adding lasers:<\/p>\r\n\r\n<p><code>message Laser {<br \/>\r\n&nbsp;&nbsp;&nbsp;string id = 1;<br \/>\r\n&nbsp;&nbsp;&nbsp;Direction direction = 2;<br \/>\r\n&nbsp;&nbsp;&nbsp;google.protobuf.Timestamp startTime = 3;<br \/>\r\n&nbsp;&nbsp;&nbsp;Coordinate initialPosition = 4;<br \/>\r\n&nbsp;&nbsp;&nbsp;string ownerId = 5;<br \/>\r\n}<br \/>\r\nmessage Entity {<br \/>\r\n&nbsp;&nbsp;&nbsp;oneof entity {<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Player player = 2;<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Laser laser = 3;<br \/>\r\n&nbsp;&nbsp;&nbsp;}<br \/>\r\n}<br \/>\r\nmessage AddEntity {<br \/>\r\n&nbsp;&nbsp;&nbsp;Entity entity = 1;<br \/>\r\n}<\/code><\/p>\r\n\r\n<p>Because the game engine abstracts entities, the proto file needs to as well. The helper method for converting a game laser to a proto laser, which is used in this message, is:<\/p>\r\n\r\n<p><code>func GetProtoLaser(laser *backend.Laser) *Laser {<br \/>\r\n&nbsp;&nbsp;&nbsp;timestamp, err := ptypes.TimestampProto(laser.StartTime)<br \/>\r\n&nbsp;&nbsp;&nbsp;if err != nil {<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.Printf(\"failed to convert time to proto timestamp: %+v\", err)<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return nil<br \/>\r\n&nbsp;&nbsp;&nbsp;}<br \/>\r\n&nbsp;&nbsp;&nbsp;return &amp;Laser{<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Id: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;laser.ID().String(),<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartTime: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;timestamp,<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InitialPosition: GetProtoCoordinate(laser.InitialPosition),<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Direction: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetProtoDirection(laser.Direction),<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OwnerId: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;laser.OwnerID.String(),<br \/>\r\n&nbsp;&nbsp;&nbsp;}<br \/>\r\n}<\/code><\/p>\r\n\r\n<p>These helper methods can convert to\/from proto structs for players, lasers, coordinates, and directions. It seems like a lot of boilerplate to write to use gRPC, but made my life a lot easier in the long run. I considered using proto structs for the game engine as well to make this easier, but I found them hard to work with and almost unreadable when using \u201coneof\u201d because of all the nested interfaces. I think this is more of a Go problem than a gRPC one.<br \/>\r\nAn authoritative server<br \/>\r\nTalking about the messages above give an idea of the kind of work the server and client have to do, but I\u2019ll go over some snippets that I find interesting.<\/p>\r\n\r\n<p>The shooter server is an authoritative game server, which means it runs a real instance of the game and treats client requests like user input. As a result, the server integration with the game engine is close to the frontend\u2019s, in terms of how actions are sent.<\/p>\r\n\r\n<p>As mentioned above, when a client connects it sends over some basic information, which when validated is used to add a new player to the game, and to add a new client to the server. Here\u2019s what the server structs look like:<\/p>\r\n\r\n<p><code>type client struct {<br \/>\r\n&nbsp;&nbsp;&nbsp;streamServer proto.Game_StreamServer<br \/>\r\n&nbsp;&nbsp;&nbsp;lastMessage &nbsp;time.Time<br \/>\r\n&nbsp;&nbsp;&nbsp;done &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chan error<br \/>\r\n&nbsp;&nbsp;&nbsp;playerID &nbsp;&nbsp;&nbsp;&nbsp;uuid.UUID<br \/>\r\n&nbsp;&nbsp;&nbsp;id &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uuid.UUID<br \/>\r\n}<br \/>\r\n&nbsp;<br \/>\r\ntype GameServer struct {<br \/>\r\n&nbsp;&nbsp;&nbsp;proto.UnimplementedGameServer<br \/>\r\n&nbsp;&nbsp;&nbsp;game &nbsp;&nbsp;&nbsp;&nbsp;*backend.Game<br \/>\r\n&nbsp;&nbsp;&nbsp;clients &nbsp;map[uuid.UUID]*client<br \/>\r\n&nbsp;&nbsp;&nbsp;mu &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sync.RWMutex<br \/>\r\n&nbsp;&nbsp;&nbsp;password string<br \/>\r\n}<\/code><\/p>\r\n\r\n<p>The server maps connection tokens to clients, and each client holds an instance of that client\u2019s stream server (which is set when they start streaming). Storing a map of clients allows the server to broadcast messages to all clients when game state changes, which is done using this method:<\/p>\r\n\r\n<p><code>func (s *GameServer) broadcast(resp *proto.Response) {<br \/>\r\n&nbsp;&nbsp;&nbsp;s.mu.Lock()<br \/>\r\n&nbsp;&nbsp;&nbsp;for id, currentClient := range s.clients {<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if currentClient.streamServer == nil {<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if err := currentClient.streamServer.Send(resp); err != nil {<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.Printf(\"%s - broadcast error %v\", id, err)<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentClient.done &lt;- errors.New(\"failed to broadcast message\")<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.Printf(\"%s - broadcasted %+v\", resp, id)<br \/>\r\n&nbsp;&nbsp;&nbsp;}<br \/>\r\n&nbsp;&nbsp;&nbsp;s.mu.Unlock()<br \/>\r\n}<\/code><\/p>\r\n\r\n<p>A typical connect\/broadcast flow looks like this:<\/p>\r\n\r\n<ol>\r\n\t<li>Player1 makes a connect request<\/li>\r\n\t<li>The server add the player to the game, adds a new client, and responds with a token<\/li>\r\n\t<li>Player1 uses the token to open a new stream<\/li>\r\n\t<li>The server starts a loop to watch for messages, and stores the stream server in the client struct<\/li>\r\n\t<li>Player2 follows steps 1-4<\/li>\r\n\t<li>Player1 makes a move request on the stream<\/li>\r\n\t<li>The server sends a move action to the game engine<\/li>\r\n\t<li>The game engine accepts the action and sends a move change<\/li>\r\n\t<li>The server sees the move change, and broadcasts an UpdateEntity response containing Player1\u2019s new position to all connected clients<\/li>\r\n\t<li>Player1 and Player2 receive the message and update their local instance of the entity<\/li>\r\n<\/ol>\r\n\r\n<p>Typically in multiplayer games, servers have a period of time where they accept requests, change game state, then broadcast all state changes at once to all clients. This \u201ctick\u201d limits how many requests the server sends, and prevents players with faster connections from having a huge advantage. It also lets you more easily calculate ping. The server I built for this game broadcasts changes as soon as they happen, which is probably a design mistake. I don\u2019t think I can quantify what negative effects it has, but it\u2019s certainly not efficient.<\/p>\r\n\r\n<p>One other issue I found in my design, of course after I was done with this example project, is that there may be cases where a client is broadcasted a response in more than one goroutine at once. According to the gRPC docs (https:\/\/github.com\/grpc\/grpc-go\/blob\/master\/Documentation\/concurrency.md#streams) this is not safe. Using a normal tick to send updates would have avoided this issue.<\/p>\r\n\r\n<h2>A (relatively) simple client<\/h2>\r\n\r\n<p>In terms of its gRPC integration, the client is similar to the server. It streams responses, converts those responses to structs the game engine can understand, and updates game state directly.<\/p>\r\n\r\n<p>I do have one interesting thing to call out - since the client and the server run their own version of the game engine, high latency could land you in sticky situations as the round comes to a close. For example:<\/p>\r\n\r\n<ol>\r\n\t<li>Player1 shoots a laser at Player2, and sends a laser request to the server<\/li>\r\n\t<li>Player1\u2019s local game thinks the laser hit Player 2 and acts like Player2 was killed, which could end the round<\/li>\r\n\t<li>The server gets the laser request, but sees that Player2 moved out of the way, so no collision happens<\/li>\r\n<\/ol>\r\n\r\n<p>Now Player1\u2019s game state is dangerously desynchronized from the server state. Recovering from this would mean getting the real score from the server, knowing the round isn\u2019t over, and that Player2 wasn\u2019t hit.<\/p>\r\n\r\n<p>To work around this, I added an \u201cisAuthoritative\u201d boolean to the game engine. If a game isn\u2019t authoritative, players are never killed when lasers collide with them. In the high latency situation above, Player1 would see the laser hit Player2, but nothing would happen until the server confirmed that Player2 was hit. This is the only part of the game engine I had to directly modify to support multiplayer.<\/p>\r\n\r\n<h2>Bonus - bots<\/h2>\r\n\r\n<p>Testing the game by myself was getting boring, so I decided to throw together a simple bot system that was compatible with the game. Bots run in a goroutine that watches for game changes, and sends actions to the game engine in the same way the frontend does.<\/p>\r\n\r\n<p>The algorithm for the bots is straightforward:<\/p>\r\n\r\n<ol>\r\n\t<li>Get a map of all player positions<\/li>\r\n\t<li>See if any player can be shot - in other words if a player is in the same row or column as the bot, and not walls are in between them<\/li>\r\n\t<li>If a player can be shot at, fire a laser<\/li>\r\n\t<li>If no player can be shot at, find the closest player to the bot<\/li>\r\n\t<li>Use an A* algorithm to determine a path between the bot and the player. I used https:\/\/github.com\/beefsack\/go-astar which worked great<\/li>\r\n\t<li>Move on the path towards the player<\/li>\r\n<\/ol>\r\n\r\n<p>This worked well with one player and one bot, but I found that when bots faced off they would get stuck in loops of always moving or always shooting:<\/p>\r\n<img alt=\"Bots in tshooter stuck in a loop.\" data-align=\"center\" data-entity-type=\"file\" data-entity-uuid=\"cadb4f60-ca5f-465f-a592-7c0dc488dec9\" height=\"348\" src=\"\/sites\/default\/files\/inline-images\/dumbbots.gif\" width=\"581\" \/>\r\n<p>To work around this, I added in some lazy code to have bots randomly move in one direction ~40% of the time. This let them break out of loops and made them harder to predict, although I\u2019m sure there are better ways to make bots smarter. Here\u2019s them after the change:<\/p>\r\n<img alt=\"Bots in tshooter with normal movement\" data-align=\"center\" data-entity-type=\"file\" data-entity-uuid=\"fcce039a-ad5a-4df7-8d0c-45360c128889\" height=\"348\" src=\"\/sites\/default\/files\/inline-images\/botssmart.gif\" width=\"581\" \/>\r\n<p>What I really liked about building this is that it proved that the game was abstract enough to allow for something as seemingly complex as bots to be added without any refactoring. Additionally, I found that I could run a bot locally and connect it to a game server with no issues &nbsp;- so you could have a fully networked game of bots running on separate machines.<\/p>\r\n\r\n<p>Having a strict separation of frontend, backend, server, client, and bot goroutines allows for a lot of flexibility, but has downsides.<\/p>\r\n\r\n<h2>While we\u2019re talking about concurrency\u2026<\/h2>\r\n\r\n<p>Since I made this engine from scratch, and was in many ways using this as a project for me to learn Go, I ended up not following a lot of game programming patterns. For instance, there is no \u201cmain\u201d game loop. Instead, there are many independent goroutines with different tickers. For instance, a client in a networked game has these goroutines:<\/p>\r\n\r\n<ul>\r\n\t<li>Frontend goroutine to redraw the game<\/li>\r\n\t<li>Frontend goroutine to watch for app closures<\/li>\r\n\t<li>Backend goroutine to watch the action channel<\/li>\r\n\t<li>Backend goroutine to watch for collisions<\/li>\r\n\t<li>Client goroutine to watch the change channel<\/li>\r\n\t<li>Client goroutine to receive stream messages<\/li>\r\n<\/ul>\r\n\r\n<p>All of these goroutines access the game state, and as a result all need to lock the game\u2019s mutex to ensure there are no race conditions. Because there\u2019s so much locking, it\u2019s hard for me to say for sure that the game is free of deadlocks (although I\u2019ve tested it quite a bit). I really like that each part of the game is separated, but how much easier would things be if I consolidated the goroutines and created something closer to a traditional game loop?<\/p>\r\n\r\n<h2>The finished product<\/h2>\r\n\r\n<p>In the end, I\u2019m happy with what I accomplished and think that this was a good stress test for my Go skills, and for gRPC as a technology. I think I\u2019ve learned a lot of lessons here and want to give a larger, more complex multiplayer terminal game a shot. I think moving to using tick-style updates, less goroutines (or simpler locking, or more channels), and having a game that\u2019s less reaction based would work out well. Here\u2019s a short GIF showing the full experience of launching a server and connecting to it from a client:<\/p>\r\n<img alt=\"A full run of tshooter\" data-align=\"center\" data-entity-type=\"file\" data-entity-uuid=\"71079746-ed20-451e-8b6c-fb23d89b114f\" height=\"364\" src=\"\/sites\/default\/files\/inline-images\/gamefull.gif\" width=\"585\" \/>\r\n<p>You can check out the code for this project at https:\/\/github.com\/mortenson\/grpc-game-example, and can download binaries in the releases page. As I mentioned I\u2019m new to Go, so please be gentle when reviewing my work!<br \/>\r\n&nbsp;<\/p>\r\n",
            "format": "full_html",
            "summary": ""
        }
    ],
    "field_tags": [
        {
            "target_type": "taxonomy_term",
            "target_uuid": "d9871794-7262-415a-a18e-fc784794b1c9"
        },
        {
            "target_type": "taxonomy_term",
            "target_uuid": "ee257f7f-af25-4ce2-8f16-b6ec71bd2192"
        },
        {
            "target_type": "taxonomy_term",
            "target_uuid": "457b0d67-f472-4014-b68a-e190cb133ac0"
        },
        {
            "target_type": "taxonomy_term",
            "target_uuid": "8ddd3b39-b7c4-4211-8bb3-b76237bcade8"
        },
        {
            "target_type": "taxonomy_term",
            "target_uuid": "3b5c4a61-bde5-43f7-b75e-6460396752e2"
        }
    ]
}